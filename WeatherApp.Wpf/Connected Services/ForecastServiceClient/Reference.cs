//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ForecastService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetForecastRequest", Namespace="http://schemas.datacontract.org/2004/07/Wcf.ForecastService.Models")]
    public partial class GetForecastRequest : object
    {
        
        private System.DateTime DateField;
        
        private string GeoObjectNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GeoObjectName
        {
            get
            {
                return this.GeoObjectNameField;
            }
            set
            {
                this.GeoObjectNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ForecastDto", Namespace="http://schemas.datacontract.org/2004/07/Wcf.ForecastService.Dtos")]
    public partial class ForecastDto : object
    {
        
        private System.DateTime DateField;
        
        private double MaxTemperatureField;
        
        private double MinTemperatureField;
        
        private double PrecipitationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxTemperature
        {
            get
            {
                return this.MaxTemperatureField;
            }
            set
            {
                this.MaxTemperatureField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinTemperature
        {
            get
            {
                return this.MinTemperatureField;
            }
            set
            {
                this.MinTemperatureField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Precipitation
        {
            get
            {
                return this.PrecipitationField;
            }
            set
            {
                this.PrecipitationField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeoObjectDto", Namespace="http://schemas.datacontract.org/2004/07/Wcf.ForecastService.Dtos")]
    public partial class GeoObjectDto : object
    {
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ForecastService.IForecastService")]
    public interface IForecastService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForecastService/GetForecast", ReplyAction="http://tempuri.org/IForecastService/GetForecastResponse")]
        ForecastService.ForecastDto GetForecast(ForecastService.GetForecastRequest requestModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForecastService/GetForecast", ReplyAction="http://tempuri.org/IForecastService/GetForecastResponse")]
        System.Threading.Tasks.Task<ForecastService.ForecastDto> GetForecastAsync(ForecastService.GetForecastRequest requestModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForecastService/GetAvailableGeoObjects", ReplyAction="http://tempuri.org/IForecastService/GetAvailableGeoObjectsResponse")]
        ForecastService.GeoObjectDto[] GetAvailableGeoObjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IForecastService/GetAvailableGeoObjects", ReplyAction="http://tempuri.org/IForecastService/GetAvailableGeoObjectsResponse")]
        System.Threading.Tasks.Task<ForecastService.GeoObjectDto[]> GetAvailableGeoObjectsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    public interface IForecastServiceChannel : ForecastService.IForecastService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1-preview-30514-0828")]
    public partial class ForecastServiceClient : System.ServiceModel.ClientBase<ForecastService.IForecastService>, ForecastService.IForecastService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ForecastServiceClient() : 
                base(ForecastServiceClient.GetDefaultBinding(), ForecastServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IForecastService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ForecastServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ForecastServiceClient.GetBindingForEndpoint(endpointConfiguration), ForecastServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ForecastServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ForecastServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ForecastServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ForecastServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ForecastServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ForecastService.ForecastDto GetForecast(ForecastService.GetForecastRequest requestModel)
        {
            return base.Channel.GetForecast(requestModel);
        }
        
        public System.Threading.Tasks.Task<ForecastService.ForecastDto> GetForecastAsync(ForecastService.GetForecastRequest requestModel)
        {
            return base.Channel.GetForecastAsync(requestModel);
        }
        
        public ForecastService.GeoObjectDto[] GetAvailableGeoObjects()
        {
            return base.Channel.GetAvailableGeoObjects();
        }
        
        public System.Threading.Tasks.Task<ForecastService.GeoObjectDto[]> GetAvailableGeoObjectsAsync()
        {
            return base.Channel.GetAvailableGeoObjectsAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IForecastService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IForecastService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/ForecastService/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ForecastServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IForecastService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ForecastServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IForecastService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IForecastService,
        }
    }
}
